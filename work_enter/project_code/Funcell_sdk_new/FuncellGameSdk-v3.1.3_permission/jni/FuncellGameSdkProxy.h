/* DO NOT EDIT THIS FILE - it is machine generated */
#ifndef FUNCELL_GAMESDKPROXY_H
#define FUNCELL_GAMESDKPROXY_H
#include <string.h>
#include <string>
#include "cocos2d.h"

using namespace std;

extern "C" {
/**
 * 初始化回调
 */
class IFuncellInitCallBack {
public:
	virtual void onInitSuccess() = 0;
	virtual void onInitFailure(const char *msg) = 0;
};

/**
 * 登录成功后返回的数据类
 */
class FuncellSession {
	const char *mChannelCode; //渠道标识
	const char *mUserID; //平台用户ID
	const char *mUsername; //平台用户名
	const char *mToken; //平台token
	const char *mProductCode; //游戏标识
	const char *mChannelUserId; //渠道用户ID
	const char *mChannelUserName; //渠道用户名
public:
	void setChannelCode(const char* channelCode) {
		mChannelCode = channelCode;
	}
	void setUserId(const char* userId) {
		mUserID = userId;
	}
	void setUsername(const char* username) {
		mUsername = username;
	}
	void setToken(const char* token) {
		mToken = token;
	}
	void setProductCode(const char* productCode) {
		mProductCode = productCode;
	}
	void setChannelUserId(const char* channelUserId) {
		mChannelUserId = channelUserId;
	}
	void setChannelUserName(const char* channelUserName) {
		mChannelUserName = channelUserName;
	}

	const char* getChannelCode() {
		char *result = new char[strlen(mChannelCode) + 1];
		strcpy(result, mChannelCode);
		return result;
	}
	const char* getUserId() {
		char *result = new char[strlen(mUserID) + 1];
		strcpy(result, mUserID);
		return result;
	}
	const char* getUsername() {
		char *result = new char[strlen(mUsername) + 1];
		strcpy(result, mUsername);
		return result;
	}
	const char* getToken() {
		char *result = new char[strlen(mToken) + 1];
		strcpy(result, mToken);
		return result;
	}
	const char* getProductCode() {
		char *result = new char[strlen(mProductCode) + 1];
		strcpy(result, mProductCode);
		return result;
	}
	const char* getChannelUserId() {
		char *result = new char[strlen(mChannelUserId) + 1];
		strcpy(result, mChannelUserId);
		return result;
	}

	const char* getChannelUserName() {
		char *result = new char[strlen(mChannelUserName) + 1];
		strcpy(result, mChannelUserName);
		return result;
	}

};

/**
 * 用户登录，登出回调
 */
class IFuncellSessionCallBack {
public:
	virtual void onLoginSuccess(FuncellSession *session) = 0;
	virtual void onLoginCancel() = 0;
	virtual void onLoginFailed(char *paramString) = 0;
	virtual void onLogout() = 0;
};

/**
 * 支付回调
 */
class IFuncellPayCallBack {
public:
	virtual void onSuccess(char *cpOrder, char *sdkOrder,
			char *extrasParams) = 0;
	virtual void onFail(char *paramString) = 0;
	virtual void onCancel(char *paramString) = 0;
};

/**
 * 游戏退出回调
 */
class IFuncellExitCallBack {
public:
	virtual void onChannelExit() = 0;
	virtual void onGameExit() = 0;
};

class FuncellGameSdkProxy {
public:

	static void Init(IFuncellInitCallBack *initCallBack,
			IFuncellSessionCallBack *sessionCallBack,
			IFuncellPayCallBack *payCallBack);

	static void Login();

	static void Logout();

	static int GetExitUI();

	static void Exit(IFuncellExitCallBack *exitCallBack);
};

}
#endif
